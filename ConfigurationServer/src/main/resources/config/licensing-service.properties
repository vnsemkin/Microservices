example = default_profile
spring.datasource.url = jdbc:postgresql://database:5432/ostock_dev
spring.datasource.username = postgres
spring.datasource.password = postgres
server.port = 8082

eureka.instance.preferIpAddress = true
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://eureka-server:8070/eureka/

# OAuth2/OpenID Connect Client Configuration
spring.security.oauth2.client.registration.keycloak.client-id=ostock
spring.security.oauth2.client.registration.keycloak.client-secret=${KEY_SECRET}
spring.security.oauth2.client.registration.keycloak.client-name=Keycloak
spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.scope=openid

# Keycloak as Authorization Server Configuration
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/spmia-realm
# If your application is running behind a proxy that terminates SSL, you might need to set this to true
spring.security.oauth2.client.provider.keycloak.ssl-required=external

# Additional Configuration for Resource Server (if your application also acts as a resource server)
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/spmia-realm