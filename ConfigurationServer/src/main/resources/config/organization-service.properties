spring.jpa.hibernate.ddl-auto=none
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql = true
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.database.driverClassName= org.postgresql.Driver
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
spring.datasource.url = jdbc:postgresql://database:5432/ostock_dev
spring.datasource.username = postgres
spring.datasource.password = postgres
server.port= 8081

spring.cloud.loadbalancer.ribbon.enabled = false

management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true

eureka.instance.preferIpAddress = true
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://eureka-server:8070/eureka/

# OAuth2/OpenID Connect Client Configuration
spring.security.oauth2.client.registration.keycloak.client-id=my_app
spring.security.oauth2.client.registration.keycloak.client-secret=${KEY_SECRET}
spring.security.oauth2.client.registration.keycloak.client-name=Keycloak
spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.scope=openid

# Keycloak as Authorization Server Configuration
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/my_microservices
# If your application is running behind a proxy that terminates SSL, you might need to set this to true
spring.security.oauth2.client.provider.keycloak.ssl-required=external

# Additional Configuration for Resource Server (if your application also acts as a resource server)
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/my_microservices

# Examples
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.cloud.function.definition=consumerBinding;processorBinding;producerBinding
#spring.cloud.function.definition=producerBinding
#spring.cloud.stream.bindings.consumerBinding-in-0.destination= consumer-topic
#spring.cloud.stream.bindings.processorBinding-in-0.destination= processor-topic
#spring.cloud.stream.bindings.processorBinding-out-0.destination= consumer-topic
#spring.cloud.stream.bindings.producerBinding-out-0.destination= processor-topic

spring.cloud.stream.bindings.output.content-type=application/json
spring.kafka.bootstrap-servers=localhost:9092
spring.cloud.stream.bindings.output.destination=orgChangeTopic
spring.cloud.stream.kafka.binder.brokers=localhost:9092

app.client=my_app
